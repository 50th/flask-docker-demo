version: '3.3'
services:
  mysql:
    image: mysql:8
    container_name: mysql_container
    restart: always
    command: bash -c "chmod 644 /etc/mysql/my.cnf && /entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
    volumes:
      # 挂载 my.cnf 配置文件
      - ./docker_volumes/mysql/my.cnf:/etc/mysql/my.cnf
      # 初始化数据库，创建容器时会执行 init 下的 sql 语句
      - ./docker_volumes/mysql/init:/docker-entrypoint-initdb.d/
    environment:
      # 设置密码
      - 'MYSQL_ROOT_PASSWORD=1234'
      # 设置时区
      - 'TZ=Asia/Shanghai'
    # ports:
      # 映射端口，如果不用外部访问可以不配置
      # - 3306:3306
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
    networks:
      docker_demo_net:
        ipv4_address: 172.16.238.3

  nginx:
    image: nginx:1.21.3
    container_name: nginx_container
    restart: always
    volumes:
      - ./docker_volumes/nginx/cert:/etc/nginx/cert
      - ./docker_volumes/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '8080:8080'
    environment:
      - 'TZ=Asia/Shanghai'
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
    networks:
      docker_demo_net:
        ipv4_address: 172.16.238.7

  flask_app:
    image: flask_app:0.0.1
    container_name: flask_app
    restart: always
    tty: true
    environment:
      - 'TZ=Asia/Shanghai'
    # volumes: # 挂载目录
    logging:
      driver: 'json-file'
      options:
        max-size: '100m'
    depends_on:
      - mysql
    networks:
      docker_demo_net:
        ipv4_address: 172.16.238.10

# 创建一个虚拟网络，固定每个容器的 ip
networks:
  docker_demo_net:
    ipam:
      driver: default
      config:
        - subnet: '172.16.238.0/24'
